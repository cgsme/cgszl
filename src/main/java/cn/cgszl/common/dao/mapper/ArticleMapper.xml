<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.cgszl.common.dao.mapper.ArticleMapper">
    <resultMap id="BaseResultMap" type="cn.cgszl.common.dao.pojo.Article">
        <constructor>
            <idArg column="aid" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="title" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="slug" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="created" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="modified" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="author_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="type" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="tags" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="categories" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="hits" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="comments_num" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="allow_comment" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="allow_ping" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="allow_feed" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="like_num" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="unlike_num" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="draft" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="delete_flag" javaType="java.lang.Boolean" jdbcType="BIT"/>
        </constructor>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="cn.cgszl.common.dao.pojo.Article">
        <constructor>
            <idArg column="aid" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="title" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="slug" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="created" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="modified" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="author_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="type" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="tags" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="categories" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="hits" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="comments_num" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="allow_comment" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="allow_ping" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="allow_feed" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="like_num" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="unlike_num" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="draft" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="delete_flag" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="content" javaType="java.lang.String" jdbcType="LONGVARCHAR"/>
        </constructor>
        <association property="user" resultMap="userResultMap"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        aid, title, slug, created, modified, author_id, type, status, tags, categories, hits,
        comments_num, allow_comment, allow_ping, allow_feed, like_num, unlike_num, draft,
        delete_flag
    </sql>
    <sql id="Blob_Column_List">
        content
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="cn.cgszl.common.dao.pojo.ArticleExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_articles
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="cn.cgszl.common.dao.pojo.ArticleExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_articles
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_articles
        where aid = #{aid,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        DELETE FROM t_articles
        WHERE aid = #{aid,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="cn.cgszl.common.dao.pojo.ArticleExample">
        delete from t_articles
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.cgszl.common.dao.pojo.Article">
        INSERT INTO t_articles (aid, title, slug,
                                created, modified, author_id,
                                type, status, tags,
                                categories, hits, comments_num,
                                allow_comment, allow_ping, allow_feed,
                                like_num, unlike_num, draft,
                                delete_flag, content)
        VALUES (#{aid,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{slug,jdbcType=VARCHAR},
                                         #{created,jdbcType=INTEGER}, #{modified,jdbcType=INTEGER},
                                         #{authorId,jdbcType=INTEGER},
                                         #{type,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{tags,jdbcType=VARCHAR},
                                         #{categories,jdbcType=VARCHAR}, #{hits,jdbcType=INTEGER},
                #{commentsNum,jdbcType=INTEGER},
                #{allowComment,jdbcType=BIT}, #{allowPing,jdbcType=BIT}, #{allowFeed,jdbcType=BIT},
                #{likeNum,jdbcType=INTEGER}, #{unlikeNum,jdbcType=INTEGER}, #{draft,jdbcType=BIT},
                #{deleteFlag,jdbcType=BIT}, #{content,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="cn.cgszl.common.dao.pojo.Article">
        insert into t_articles
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="aid != null">
                aid,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="slug != null">
                slug,
            </if>
            <if test="created != null">
                created,
            </if>
            <if test="modified != null">
                modified,
            </if>
            <if test="authorId != null">
                author_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="tags != null">
                tags,
            </if>
            <if test="categories != null">
                categories,
            </if>
            <if test="hits != null">
                hits,
            </if>
            <if test="commentsNum != null">
                comments_num,
            </if>
            <if test="allowComment != null">
                allow_comment,
            </if>
            <if test="allowPing != null">
                allow_ping,
            </if>
            <if test="allowFeed != null">
                allow_feed,
            </if>
            <if test="likeNum != null">
                like_num,
            </if>
            <if test="unlikeNum != null">
                unlike_num,
            </if>
            <if test="draft != null">
                draft,
            </if>
            <if test="deleteFlag != null">
                delete_flag,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="aid != null">
                #{aid,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="slug != null">
                #{slug,jdbcType=VARCHAR},
            </if>
            <if test="created != null">
                #{created,jdbcType=INTEGER},
            </if>
            <if test="modified != null">
                #{modified,jdbcType=INTEGER},
            </if>
            <if test="authorId != null">
                #{authorId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="tags != null">
                #{tags,jdbcType=VARCHAR},
            </if>
            <if test="categories != null">
                #{categories,jdbcType=VARCHAR},
            </if>
            <if test="hits != null">
                #{hits,jdbcType=INTEGER},
            </if>
            <if test="commentsNum != null">
                #{commentsNum,jdbcType=INTEGER},
            </if>
            <if test="allowComment != null">
                #{allowComment,jdbcType=BIT},
            </if>
            <if test="allowPing != null">
                #{allowPing,jdbcType=BIT},
            </if>
            <if test="allowFeed != null">
                #{allowFeed,jdbcType=BIT},
            </if>
            <if test="likeNum != null">
                #{likeNum,jdbcType=INTEGER},
            </if>
            <if test="unlikeNum != null">
                #{unlikeNum,jdbcType=INTEGER},
            </if>
            <if test="draft != null">
                #{draft,jdbcType=BIT},
            </if>
            <if test="deleteFlag != null">
                #{deleteFlag,jdbcType=BIT},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.cgszl.common.dao.pojo.ArticleExample" resultType="java.lang.Long">
        select count(*) from t_articles
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update t_articles
        <set>
            <if test="record.aid != null">
                aid = #{record.aid,jdbcType=INTEGER},
            </if>
            <if test="record.title != null">
                title = #{record.title,jdbcType=VARCHAR},
            </if>
            <if test="record.slug != null">
                slug = #{record.slug,jdbcType=VARCHAR},
            </if>
            <if test="record.created != null">
                created = #{record.created,jdbcType=INTEGER},
            </if>
            <if test="record.modified != null">
                modified = #{record.modified,jdbcType=INTEGER},
            </if>
            <if test="record.authorId != null">
                author_id = #{record.authorId,jdbcType=INTEGER},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=VARCHAR},
            </if>
            <if test="record.tags != null">
                tags = #{record.tags,jdbcType=VARCHAR},
            </if>
            <if test="record.categories != null">
                categories = #{record.categories,jdbcType=VARCHAR},
            </if>
            <if test="record.hits != null">
                hits = #{record.hits,jdbcType=INTEGER},
            </if>
            <if test="record.commentsNum != null">
                comments_num = #{record.commentsNum,jdbcType=INTEGER},
            </if>
            <if test="record.allowComment != null">
                allow_comment = #{record.allowComment,jdbcType=BIT},
            </if>
            <if test="record.allowPing != null">
                allow_ping = #{record.allowPing,jdbcType=BIT},
            </if>
            <if test="record.allowFeed != null">
                allow_feed = #{record.allowFeed,jdbcType=BIT},
            </if>
            <if test="record.likeNum != null">
                like_num = #{record.likeNum,jdbcType=INTEGER},
            </if>
            <if test="record.unlikeNum != null">
                unlike_num = #{record.unlikeNum,jdbcType=INTEGER},
            </if>
            <if test="record.draft != null">
                draft = #{record.draft,jdbcType=BIT},
            </if>
            <if test="record.deleteFlag != null">
                delete_flag = #{record.deleteFlag,jdbcType=BIT},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update t_articles
        set aid = #{record.aid,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},
        slug = #{record.slug,jdbcType=VARCHAR},
        created = #{record.created,jdbcType=INTEGER},
        modified = #{record.modified,jdbcType=INTEGER},
        author_id = #{record.authorId,jdbcType=INTEGER},
        type = #{record.type,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=VARCHAR},
        tags = #{record.tags,jdbcType=VARCHAR},
        categories = #{record.categories,jdbcType=VARCHAR},
        hits = #{record.hits,jdbcType=INTEGER},
        comments_num = #{record.commentsNum,jdbcType=INTEGER},
        allow_comment = #{record.allowComment,jdbcType=BIT},
        allow_ping = #{record.allowPing,jdbcType=BIT},
        allow_feed = #{record.allowFeed,jdbcType=BIT},
        like_num = #{record.likeNum,jdbcType=INTEGER},
        unlike_num = #{record.unlikeNum,jdbcType=INTEGER},
        draft = #{record.draft,jdbcType=BIT},
        delete_flag = #{record.deleteFlag,jdbcType=BIT},
        content = #{record.content,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_articles
        set aid = #{record.aid,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},
        slug = #{record.slug,jdbcType=VARCHAR},
        created = #{record.created,jdbcType=INTEGER},
        modified = #{record.modified,jdbcType=INTEGER},
        author_id = #{record.authorId,jdbcType=INTEGER},
        type = #{record.type,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=VARCHAR},
        tags = #{record.tags,jdbcType=VARCHAR},
        categories = #{record.categories,jdbcType=VARCHAR},
        hits = #{record.hits,jdbcType=INTEGER},
        comments_num = #{record.commentsNum,jdbcType=INTEGER},
        allow_comment = #{record.allowComment,jdbcType=BIT},
        allow_ping = #{record.allowPing,jdbcType=BIT},
        allow_feed = #{record.allowFeed,jdbcType=BIT},
        like_num = #{record.likeNum,jdbcType=INTEGER},
        unlike_num = #{record.unlikeNum,jdbcType=INTEGER},
        draft = #{record.draft,jdbcType=BIT},
        delete_flag = #{record.deleteFlag,jdbcType=BIT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.cgszl.common.dao.pojo.Article">
        update t_articles
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="slug != null">
                slug = #{slug,jdbcType=VARCHAR},
            </if>
            <if test="created != null">
                created = #{created,jdbcType=INTEGER},
            </if>
            <if test="modified != null">
                modified = #{modified,jdbcType=INTEGER},
            </if>
            <if test="authorId != null">
                author_id = #{authorId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="tags != null">
                tags = #{tags,jdbcType=VARCHAR},
            </if>
            <if test="categories != null">
                categories = #{categories,jdbcType=VARCHAR},
            </if>
            <if test="hits != null">
                hits = #{hits,jdbcType=INTEGER},
            </if>
            <if test="commentsNum != null">
                comments_num = #{commentsNum,jdbcType=INTEGER},
            </if>
            <if test="allowComment != null">
                allow_comment = #{allowComment,jdbcType=BIT},
            </if>
            <if test="allowPing != null">
                allow_ping = #{allowPing,jdbcType=BIT},
            </if>
            <if test="allowFeed != null">
                allow_feed = #{allowFeed,jdbcType=BIT},
            </if>
            <if test="likeNum != null">
                like_num = #{likeNum,jdbcType=INTEGER},
            </if>
            <if test="unlikeNum != null">
                unlike_num = #{unlikeNum,jdbcType=INTEGER},
            </if>
            <if test="draft != null">
                draft = #{draft,jdbcType=BIT},
            </if>
            <if test="deleteFlag != null">
                delete_flag = #{deleteFlag,jdbcType=BIT},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where aid = #{aid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.cgszl.common.dao.pojo.Article">
        UPDATE t_articles
        SET title         = #{title,jdbcType=VARCHAR},
            slug          = #{slug,jdbcType=VARCHAR},
            created       = #{created,jdbcType=INTEGER},
            modified      = #{modified,jdbcType=INTEGER},
            author_id     = #{authorId,jdbcType=INTEGER},
            type          = #{type,jdbcType=VARCHAR},
            status        = #{status,jdbcType=VARCHAR},
            tags          = #{tags,jdbcType=VARCHAR},
            categories    = #{categories,jdbcType=VARCHAR},
            hits          = #{hits,jdbcType=INTEGER},
            comments_num  = #{commentsNum,jdbcType=INTEGER},
            allow_comment = #{allowComment,jdbcType=BIT},
            allow_ping    = #{allowPing,jdbcType=BIT},
            allow_feed    = #{allowFeed,jdbcType=BIT},
            like_num      = #{likeNum,jdbcType=INTEGER},
            unlike_num    = #{unlikeNum,jdbcType=INTEGER},
            draft         = #{draft,jdbcType=BIT},
            delete_flag   = #{deleteFlag,jdbcType=BIT},
            content       = #{content,jdbcType=LONGVARCHAR}
        WHERE aid = #{aid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.cgszl.common.dao.pojo.Article">
        UPDATE t_articles
        SET title         = #{title,jdbcType=VARCHAR},
            slug          = #{slug,jdbcType=VARCHAR},
            created       = #{created,jdbcType=INTEGER},
            modified      = #{modified,jdbcType=INTEGER},
            author_id     = #{authorId,jdbcType=INTEGER},
            type          = #{type,jdbcType=VARCHAR},
            status        = #{status,jdbcType=VARCHAR},
            tags          = #{tags,jdbcType=VARCHAR},
            categories    = #{categories,jdbcType=VARCHAR},
            hits          = #{hits,jdbcType=INTEGER},
            comments_num  = #{commentsNum,jdbcType=INTEGER},
            allow_comment = #{allowComment,jdbcType=BIT},
            allow_ping    = #{allowPing,jdbcType=BIT},
            allow_feed    = #{allowFeed,jdbcType=BIT},
            like_num      = #{likeNum,jdbcType=INTEGER},
            unlike_num    = #{unlikeNum,jdbcType=INTEGER},
            draft         = #{draft,jdbcType=BIT},
            delete_flag   = #{deleteFlag,jdbcType=BIT}
        WHERE aid = #{aid,jdbcType=INTEGER}
    </update>

    <!--用户-->
    <resultMap id="userResultMap" type="cn.cgszl.common.dao.pojo.User">
        <id property="uid" column="uid"/>
        <result property="username" column="username" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="password" column="password" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="email" column="email" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="homeUrl" column="home_url" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="screenName" column="screen_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="created" column="created" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        <result property="activated" column="activated" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        <result property="logged" column="logged" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        <result property="groupName" column="group_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
    </resultMap>

    <!--文字表和用户表管理-->
    <select id="getArticleList" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        SELECT
            t_articles.aid,
            t_articles.title,
            t_articles.slug,
            t_articles.created,
            t_articles.modified,
            t_articles.author_id,
            t_articles.type,
            t_articles.status,
            t_articles.tags,
            t_articles.categories,
            t_articles.hits,
            t_articles.comments_num,
            t_articles.allow_comment,
            t_articles.allow_ping,
            t_articles.allow_feed,
            t_articles.like_num,
            t_articles.unlike_num,
            t_articles.draft,
            t_articles.delete_flag,
            t_articles.content,
            t_users.uid,
            t_users.username,
            t_users.password,
            t_users.email,
            t_users.home_url,
            t_users.screen_name,
            t_users.created,
            t_users.activated,
            t_users.logged,
            t_users.group_name
        FROM t_articles, t_users
        WHERE t_articles.author_id = t_users.uid
              AND t_articles.categories IS NOT NULL
              AND t_articles.categories != ''
              AND t_articles.delete_flag = 0
              AND t_articles.status = 'publish'
              AND t_articles.draft = 0
        ORDER BY t_articles.created DESC
    </select>

    <!--文字表和用户表管理-->
    <select id="getArticleDraftList" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        SELECT
            t_articles.aid,
            t_articles.title,
            t_articles.slug,
            t_articles.created,
            t_articles.modified,
            t_articles.author_id,
            t_articles.type,
            t_articles.status,
            t_articles.tags,
            t_articles.categories,
            t_articles.hits,
            t_articles.comments_num,
            t_articles.allow_comment,
            t_articles.allow_ping,
            t_articles.allow_feed,
            t_articles.like_num,
            t_articles.unlike_num,
            t_articles.draft,
            t_articles.delete_flag,
            t_articles.content,
            t_users.uid,
            t_users.username,
            t_users.password,
            t_users.email,
            t_users.home_url,
            t_users.screen_name,
            t_users.created,
            t_users.activated,
            t_users.logged,
            t_users.group_name
        FROM t_articles, t_users
        WHERE t_articles.author_id = t_users.uid
              AND t_articles.categories IS NOT NULL
              AND t_articles.categories != ''
              AND t_articles.delete_flag = 0
              AND t_articles.status = 'unpublish'
              AND t_articles.draft = 1
        ORDER BY t_articles.created DESC
    </select>
</mapper>